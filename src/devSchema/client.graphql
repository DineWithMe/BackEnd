# import UserOrderByInput from './prisma.graphql'

type Query {
  users(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
  ): [User!]!
  me: User!
  userExist(query: String): User
  emailExist(query: String): User
  verifyToken: AuthPayload
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!
  uploadFile(file: Upload!): File!
}

# type Subscription {
# }

type AuthPayload {
  userToken: String!
  user: User!
}

type userToken {
  userToken: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  username: String!
  reCAPTCHAToken: String!
}

input LoginUserInput {
  emailOrUsername: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

type User {
  id: ID!
  name: String!
  email: String
  username: String!
  updatedAt: String!
  createdAt: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

scalar Upload
